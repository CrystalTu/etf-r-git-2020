[
["index.html", "Intermediate R 1 Class Introduction 1.1 Topics &amp; Class Structure 1.2 Software Prerequisites 1.3 Human Prerequisites 1.4 Distance Learning Challenges 1.5 Endstate 1.6 Instructors Introduction 1.7 Lets Get Started…", " Intermediate R MAJ Dusty Turner and Robert Ward 7 DEC 2020 1 Class Introduction 1.1 Topics &amp; Class Structure Git/GitHub setup and repository download (~45 minutes; interactive) Ten-minute break Using R for modeling with differential equations (~30 minutes; interactive) Collaboration using Git (as time allows; instructor demonstration) 1.2 Software Prerequisites R 3.6.x or newer RStudio 1.2.x or newer Git Git Bash (included with Git for Windows) or another command-line application of your choice capable of using Git 1.3 Human Prerequisites We assume you have: Working knowledge of R and RStudio; Some experience with contemporary tidy coding concepts; A need to work collaboratively on projects; A healthy appreciation of dad jokes. Try to follow along, at least through the differential equation section. It’s okay to struggle to keep up with certain parts of this - we’ll do our best to help you, but we also won’t be offended if you decide to leave. 1.4 Distance Learning Challenges Don’t be afraid to ask questions - both verbally and in chat. If you miss something we said, it’s likely others have too - you’ll be helping them by speaking up. Its difficult the know the speed of the class, so please communicate! 1.5 Endstate You have git configured on your computer; You have linked git to github; You have a repo cloned to your computer; You can push, pull, and merge git conflicts in the repository; You’ve learned the basics of using differential equations in R. 1.6 Instructors Introduction 1.6.1 MAJ Dusty Turner Army Combat Engineer Platoon Leader / XO / Company Commander Geospatial / Sapper / Route Clearance Hawaii / White Sands Missile Range / Iraq / Afghanistan Education West Point ’07 Operations Research, BS Missouri University of Science and Technology ’12 Engineering Management, MS THE Ohio State ’16 Integrated Systems Engineering, MS Applied Statistics, Graduate Minor Data Science R User Since ’14 Catch me on Twitter @dtdusty http://dusty-turner.netlify.com/ 1.6.2 Robert Ward Education University of Chicago, ’13 Political Science &amp; English, BA Columbia University School of International and Public Affairs, ’18 Master of International Affairs, Specialization in Advanced Policy and Economic Analysis Data Science R user since 2011; also know some python and forgot some Stata Worked for GAO Applied Research &amp; Methods ORSA at CAA and Army Leader Dashboard/Vantage PM team 1.7 Lets Get Started… 1.7.1 Prerequisite Packages install.packages( &quot;tidyverse&quot; dependencies = TRUE ) "],
["2-introduction-to-git.html", "2 Introduction to git 2.1 Prerequisites 2.2 Terminology: Git vs. Git Bash vs. GitHub/GitLab/BitBucket 2.3 Global Git Configuration 2.4 Generate an SSH Key 2.5 Add SSH Key to GitHub 2.6 Fork and Clone a Repository", " 2 Introduction to git Our first step today will be to use Git to download the files for the tutorial from GitHub. Git is the world’s most widely used version control system. It is fast, flexible, and relatively easy to learn given its sophistication under the hood, making it an invaluable tool for collaborative software development. Moreover, access to Git and to services for using it collaboratively, such as GitLab, has grown substantially in the Department of Defense in recent years, including on classified networks. Learning to use Git and related services will make you a more capable programmer, even if you primarily work alone or don’t think of yourself as doing “software development.” 2.1 Prerequisites Git installed on your computer GitHub account 2.2 Terminology: Git vs. Git Bash vs. GitHub/GitLab/BitBucket “Git” is a piece of software whose primary job is to track changes between different versions of text (and other) files, efficiently keep track of the entire history of those changes, and provide tools to merge different versions of files and “branches” of repositories (called “repos” for short). Git is a distributed version control system, meaning that the entire repo and its entire history are held simultaneously in every location where the repo is stored. You must install and run Git on your own computer to use it. “Git Bash” is a command-line application included with Git for Windows, which makes the bash shell - the default command-line shell for many Linux systems - available in Windows. “GitHub,” “GitLab,” “BitBucket,” and their competitors are websites that have built additional functionality around Git, primarily focused on helping people share Git repos. They provide a central location to and from which collaborators can sync any changes they’ve made to their shared repository. They also often include various project-management and Continuous Integration/Continuous Deployment (CI/CD) tools; these are not integral to Git, and we won’t be covering them today, but they can be very useful. Somewhat confusingly, GitHub also makes a piece of software called GitHub Desktop, which bundles Git itself with a graphical interface designed for use with GitHub specifically. We won’t be using this, and I prefer using Git on the command line, but it is one of many graphical Git clients that you might consider using. Today, we’ll be using a command-line tool (Git Bash on Windows, the built-in terminal if you’re on Mac or Linux), to run various git commands on our own computers, some of which will involve communicating with GitHub. 2.3 Global Git Configuration Before doing anything with Git, we need to set some global configuration variable. To do so, open Git Bash and run the following: git config --global user.name &quot;Your Name&quot; git config --global user.email your_email_here@host.com At this point, you could use Git for version control locally - for instance, these three commands will create a new folder, make it your working directory, then initialize a git repo there. mkdir sample_repo cd sample_repo git init 2.4 Generate an SSH Key However, Git is at its most powerful when used collaboratively through a platform like GitHub, so, next, we’ll set up GitHub to communicate securely with your local machine using the SSH protocol. Instead of the username/password or smart card authentication you may be used to, SSH typically involves public key authentication. In this setup, you generate a pair of keys, provide your public key to sites that you’d like to securely communicate with, and then let ssh do some cryptographic magic to use your private key to prove your identity without ever exposing it to anyone else. To generate a key pair, running the following line of code in Git Bash/Terminal. Use the same email address as your GitHub account. ssh-keygen -t ed25519 -C &quot;&lt;your_email_here@host.com&gt;&quot; You should see a response like the one below. If you don’t already have a key, just hit enter to use the suggested file path. Generating public/private ed25519 key pair. Enter file in which to save the key (/c/Users/robert.w.ward/.ssh/id_ed25519): You can then set a passphrase for your ssh key. This has no connection to your GitHub password or anything else - it’s an additional layer of security on the keypair itself, meant to ensure that nobody could impersonate you to GitHub even if they had your private key. You won’t see letters appear as you type, but you will have to type the same password twice. Good luck! Enter passphrase (empty for no passphrase): Enter same passphrase again: 2.5 Add SSH Key to GitHub You now need to copy the public key from the newly-generated pair so that you can upload it to GitHub. You have a couple of options here. To stick with the command line, you can use the cat command, plus the path to your key, to print it out in the terminal, and then copy it from there. Typically, copying from bash uses the rather unusual hotkey Ctrl+Ins, or you can right-click the highlighted text and click “Copy.” cat ~/.ssh/id_ed25519.pub You can also navigate to this file using your system’s file explorer - on Windows, you’ll find the .ssh folder in your user folder - and open it in a text editor. Now, navigate to GitHub’s SSH Key settings page. Click “New SSH Keys” in the top-right corner, paste in your public key, give it a title, and click “Add SSH Key.” You should now be able to communicate with GitHub via SSH! The process for GitLab, which tends to be the platform of choice for use on DoD networks due to its greater availability for self-hosting, is almost identical. Simply go to the settings page, choose “SSH Keys” from the menu bar on the left, and add a key on that page. 2.6 Fork and Clone a Repository We can now use Git Now, we can finally use Git to “clone” a repository found on GitHub to our local machines. To do this, go to the GitHub repository for this book and click on the green “Code” button. With SSH selected (this should be the default), click the clipboard button to copy the repo URL. In Git Bash/Terminal, use cd to navigate to the folder in which you’d like to create the project folder, then run git clone on this URL. cd ~/projects/ git clone git@github.com:dusty-turner/etf-r-git-2020.git You should see output like the following: Cloning into &#39;etf-r-git-2020&#39;... Warning: Permanently added the RSA host key for IP address &#39;140.82.112.3&#39; to the list of known hosts. remote: Enumerating objects: 51, done. remote: Counting objects: 100% (51/51), done. remote: Compressing objects: 100% (43/43), done. remote: Total 51 (delta 8), reused 45 (delta 6), pack-reused 0 Receiving objects: 100% (51/51), 206.22 KiB | 17.18 MiB/s, done. Resolving deltas: 100% (8/8), done. This lets you know that the repo has been cloned - downloaded to your computer - successfully. Because we cloned it, it’s also linked to GitHub. However, this doesn’t mean that any work we do locally will automatically be synced to GitHub, or vice versa. Git asks us to be more intentional about tracking changes, requiring the user to choose which changes to track, when to “commit” these changes to the repo history, and when to “push” and “pull” new changes to and from GitHub. We’ll cover all of that later on. "],
["3-differential-equations-in-r.html", "3 Differential Equations in R 3.1 deSolve 3.2 Real world example: SEIR 3.3 SEIR Differential Equations using deSolve in R 3.4 Explore Results", " 3 Differential Equations in R We take a quick pause from our git introduction to talk about differential equations in R. R is best known as a statistical coding language, however, it is often important to incorporate other tools into your workflow to support modeling. 3.1 deSolve We will rely on the r package deSolve library(deSolve) deSolve is an R wrapper to the FORTRAN ODE solver As always, we’ll use tools from the tidyverse. library(tidyverse) 3.1.1 Steps to solving differential equations with deSolve Define your first order differential equations Define parameters governing the differential equations Define initial conditions Define time step Solve Differential Equations 3.2 Real world example: SEIR In epedemeology, the SEIR equations govern the spread of a disease through a population. The S, E, I, and R represent four distinct population bins: S: Suceptible E: Exposed I: Infected R: Removed A set of four differential equations govern a population’s movement through these four bins. \\(\\beta\\): Infectious rate - probability of transmitting disease between a susceptible and an infectious individual \\(\\sigma\\): 1 / time from exposed to infectiousness \\(\\gamma\\): 1 / time from infectiousness to recovery 3.3 SEIR Differential Equations using deSolve in R 3.3.1 Define the Ordinary Differential Equations seir_ode &lt;- function(t,Y,par){ S&lt;-Y[1] # Suseptible E&lt;-Y[2] # Exposed I&lt;-Y[3] # Infected beta&lt;-par[1] # this takes the first slot from the vector par that is passed in - it changes every time sigma&lt;-par[2] # this takes the second slot from the vector par that is passed in - it remains constant gamma&lt;-par[3] # this takes the third slot from the vector par that is passed in - it remains constant # mu&lt;-par[4] # this takes the third slot from the vector par that is passed in - it remains constant dYdt&lt;-vector(length=3) ## this creates an empty vector of length 3 dYdt[1]=-beta*I*S ## this is the formula for the suseptible population after the first step of the SEIR dYdt[2]=beta*I*S-sigma*E ## this is the formula for the exposed population after the first step of the SEIR dYdt[3]=sigma*E-gamma*I ## this is the formula for the infected population after the first step of the SEIR return(list(dYdt)) } 3.3.2 Define Parameters beta &lt;- 1/5 sigma &lt;- 1/6 gamma &lt;- 1/14 par&lt;-c(beta,sigma,gamma) 3.3.3 Define Initial Conditions iNot &lt;- 1/1000 # proportion of population that is infected on day 1 eNot &lt;- 1/100 # proportion of population that is exposed but not yet infected on day 1 rNot &lt;- 0 # proportion of population that is removed on day 1 sNot &lt;- 1 - iNot - eNot - rNot # proportion of population that is susceptible on day 1 init&lt;-c(sNot,eNot,iNot) 3.3.4 Define Time Steps t&lt;-seq(0,365) 3.3.5 Solve Differential Equations sol &lt;- lsoda(y = init, times = t, func = seir_ode, parms = par) head(sol) ## time 1 2 3 ## [1,] 0 0.9890000 0.010000000 0.001000000 ## [2,] 1 0.9886557 0.008785122 0.002434822 ## [3,] 2 0.9880543 0.007993881 0.003610166 ## [4,] 3 0.9872404 0.007518909 0.004604707 ## [5,] 4 0.9862442 0.007284371 0.005474887 ## [6,] 5 0.9850863 0.007234498 0.006263121 We’ll return to this output in a second, but lets first take a deeper look at what is happening in lsoda(). 3.3.6 What is going on under the hood? sol &lt;- lsoda(y = init, times = t, func = seir_ode, parms = par, verbose = T) ## ## -------------------- ## Time settings ## -------------------- ## ## Normal computation of output values of y(t) at t = TOUT ## ## -------------------- ## Integration settings ## -------------------- ## ## Model function an R-function: ## Jacobian not specified ## ## ## -------------------- ## lsoda return code ## -------------------- ## ## return code (idid) = 2 ## Integration was successful. ## ## -------------------- ## INTEGER values ## -------------------- ## ## 1 The return code : 2 ## 2 The number of steps taken for the problem so far: 372 ## 3 The number of function evaluations for the problem so far: 745 ## 5 The method order last used (successfully): 2 ## 6 The order of the method to be attempted on the next step: 2 ## 7 If return flag =-4,-5: the largest component in error vector 0 ## 8 The length of the real work array actually required: 68 ## 9 The length of the integer work array actually required: 23 ## 14 The number of Jacobian evaluations and LU decompositions so far: 0 ## 15 The method indicator for the last succesful step, ## 1=adams (nonstiff), 2= bdf (stiff): 1 ## 16 The current method indicator to be attempted on the next step, ## 1=adams (nonstiff), 2= bdf (stiff): 1 ## ## -------------------- ## RSTATE values ## -------------------- ## ## 1 The step size in t last used (successfully): 1 ## 2 The step size to be attempted on the next step: 1 ## 3 The current value of the independent variable which the solver has reached: 365.7906 ## 4 Tolerance scale factor &gt; 1.0 computed when requesting too much accuracy: 0 ## 5 The value of t at the time of the last method switch, if any: 0 ## 3.3.7 How is deSolve doing the work? Let’s put in a few print() statements to help us learn. seir_ode_explore &lt;- function(t,Y,par){ print(str_c(&quot;S at time t = &quot;, t,&quot; is: &quot;, Y[1])) print(str_c(&quot;E at time t = &quot;, t,&quot; is: &quot;, Y[2])) print(str_c(&quot;I at time t = &quot;, t,&quot; is: &quot;, Y[3])) print(str_c(&quot;R at time t = &quot;, t,&quot; is: &quot;, Y[1]-Y[2]-Y[3])) S&lt;-Y[1] # Suseptible E&lt;-Y[2] # Exposed I&lt;-Y[3] # Infected beta&lt;-par[1] # this takes the first slot from the vector par that is passed in - it changes every time sigma&lt;-par[2] # this takes the second slot from the vector par that is passed in - it remains constant gamma&lt;-par[3] # this takes the third slot from the vector par that is passed in - it remains constant dYdt&lt;-vector(length=3) ## this creates an empty vector of length 3 dYdt[1]=-beta*I*S ## this is the formula for the suseptible population after the first step of the SEIR dYdt[2]=beta*I*S-sigma*E ## this is the formula for the exposed population after the first step of the SEIR dYdt[3]=sigma*E-gamma*I ## this is the formula for the infected population after the first step of the SEIR print(str_c(&quot;dSdt at time t = &quot;, t,&quot; is: &quot;, dYdt[1])) print(str_c(&quot;dEdt at time t = &quot;, t,&quot; is: &quot;, dYdt[2])) print(str_c(&quot;dIdt at time t = &quot;, t,&quot; is: &quot;, dYdt[3])) return(list(dYdt)) } Lets see what this teaches us. t&lt;-seq(0,1) sol_explore&lt;-lsoda(y = init, times = t, func = seir_ode_explore, parms = par, verbose = F) ## [1] &quot;S at time t = 0 is: 0.989&quot; ## [1] &quot;E at time t = 0 is: 0.01&quot; ## [1] &quot;I at time t = 0 is: 0.001&quot; ## [1] &quot;R at time t = 0 is: 0.978&quot; ## [1] &quot;dSdt at time t = 0 is: -0.0001978&quot; ## [1] &quot;dEdt at time t = 0 is: -0.00146886666666667&quot; ## [1] &quot;dIdt at time t = 0 is: 0.0015952380952381&quot; ## [1] &quot;S at time t = 0 is: 0.989&quot; ## [1] &quot;E at time t = 0 is: 0.01&quot; ## [1] &quot;I at time t = 0 is: 0.001&quot; ## [1] &quot;R at time t = 0 is: 0.978&quot; ## [1] &quot;dSdt at time t = 0 is: -0.0001978&quot; ## [1] &quot;dEdt at time t = 0 is: -0.00146886666666667&quot; ## [1] &quot;dIdt at time t = 0 is: 0.0015952380952381&quot; ## [1] &quot;S at time t = 0.000999998730151101 is: 0.988999802200251&quot; ## [1] &quot;E at time t = 0.000999998730151101 is: 0.00999853113519857&quot; ## [1] &quot;I at time t = 0.000999998730151101 is: 0.00100159523606953&quot; ## [1] &quot;R at time t = 0.000999998730151101 is: 0.977999675828983&quot; ## [1] &quot;dSdt at time t = 0.000999998730151101 is: -0.000198115498071495&quot; ## [1] &quot;dEdt at time t = 0.000999998730151101 is: -0.00146830635779493&quot; ## [1] &quot;dIdt at time t = 0.000999998730151101 is: 0.00159487933900432&quot; ## [1] &quot;S at time t = 0.000999998730151101 is: 0.988999801884754&quot; ## [1] &quot;E at time t = 0.000999998730151101 is: 0.00999853169550673&quot; ## [1] &quot;I at time t = 0.000999998730151101 is: 0.00100159487731375&quot; ## [1] &quot;R at time t = 0.000999998730151101 is: 0.977999675311933&quot; ## [1] &quot;dSdt at time t = 0.000999998730151101 is: -0.000198115427046416&quot; ## [1] &quot;dEdt at time t = 0.000999998730151101 is: -0.00146830652220471&quot; ## [1] &quot;dIdt at time t = 0.000999998730151101 is: 0.00159487945801443&quot; ## [1] &quot;S at time t = 0.0019999974603022 is: 0.988999603769649&quot; ## [1] &quot;E at time t = 0.0019999974603022 is: 0.00999706339068465&quot; ## [1] &quot;I at time t = 0.0019999974603022 is: 0.00100318975486552&quot; ## [1] &quot;R at time t = 0.0019999974603022 is: 0.977999350624099&quot; ## [1] &quot;dSdt at time t = 0.0019999974603022 is: -0.000198430854013554&quot; ## [1] &quot;dEdt at time t = 0.0019999974603022 is: -0.00146774637776722&quot; ## [1] &quot;dIdt at time t = 0.0019999974603022 is: 0.00159452082071895&quot; ## [1] &quot;S at time t = 0.0019999974603022 is: 0.988999603454222&quot; ## [1] &quot;E at time t = 0.0019999974603022 is: 0.00999706395082837&quot; ## [1] &quot;I at time t = 0.0019999974603022 is: 0.00100318939622868&quot; ## [1] &quot;R at time t = 0.0019999974603022 is: 0.977999350107165&quot; ## [1] &quot;dSdt at time t = 0.0019999974603022 is: -0.000198430783011928&quot; ## [1] &quot;dEdt at time t = 0.0019999974603022 is: -0.00146774654212613&quot; ## [1] &quot;dIdt at time t = 0.0019999974603022 is: 0.00159452093969316&quot; ## [1] &quot;S at time t = 0.301390173240588 is: 0.988926061825765&quot; ## [1] &quot;E at time t = 0.301390173240588 is: 0.00958273184812076&quot; ## [1] &quot;I at time t = 0.301390173240588 is: 0.00146450547918966&quot; ## [1] &quot;R at time t = 0.301390173240588 is: 0.977878824498455&quot; ## [1] &quot;dSdt at time t = 0.301390173240588 is: -0.000289657527211457&quot; ## [1] &quot;dEdt at time t = 0.301390173240588 is: -0.00130746444747534&quot; ## [1] &quot;dIdt at time t = 0.301390173240588 is: 0.00149251444045896&quot; ## [1] &quot;S at time t = 0.301390173240588 is: 0.988926539031796&quot; ## [1] &quot;E at time t = 0.301390173240588 is: 0.00958162849766193&quot; ## [1] &quot;I at time t = 0.301390173240588 is: 0.0014653034288995&quot; ## [1] &quot;R at time t = 0.301390173240588 is: 0.977879607105235&quot; ## [1] &quot;dSdt at time t = 0.301390173240588 is: -0.000289815489714602&quot; ## [1] &quot;dEdt at time t = 0.301390173240588 is: -0.00130712259322905&quot; ## [1] &quot;dIdt at time t = 0.301390173240588 is: 0.00149227355230798&quot; ## [1] &quot;S at time t = 0.600780349020873 is: 0.988826067633474&quot; ## [1] &quot;E at time t = 0.600780349020873 is: 0.00921438462475756&quot; ## [1] &quot;I at time t = 0.600780349020873 is: 0.00189673347862316&quot; ## [1] &quot;R at time t = 0.600780349020873 is: 0.977714949530094&quot; ## [1] &quot;dSdt at time t = 0.600780349020873 is: -0.000375107901403141&quot; ## [1] &quot;dEdt at time t = 0.600780349020873 is: -0.00116062286938979&quot; ## [1] &quot;dIdt at time t = 0.600780349020873 is: 0.00140024980803413&quot; ## [1] &quot;S at time t = 0.600780349020873 is: 0.988826979620112&quot; ## [1] &quot;E at time t = 0.600780349020873 is: 0.00921227029764615&quot; ## [1] &quot;I at time t = 0.600780349020873 is: 0.00189826390777727&quot; ## [1] &quot;R at time t = 0.600780349020873 is: 0.977716445414689&quot; ## [1] &quot;dSdt at time t = 0.600780349020873 is: -0.000375410913289854&quot; ## [1] &quot;dEdt at time t = 0.600780349020873 is: -0.00115996746965117&quot; ## [1] &quot;dIdt at time t = 0.600780349020873 is: 0.00139978810381408&quot; ## [1] &quot;S at time t = 0.900170524801159 is: 0.988701726706946&quot; ## [1] &quot;E at time t = 0.900170524801159 is: 0.00888711394228682&quot; ## [1] &quot;I at time t = 0.900170524801159 is: 0.00230343298203867&quot; ## [1] &quot;R at time t = 0.900170524801159 is: 0.977511179782621&quot; ## [1] &quot;dSdt at time t = 0.900170524801159 is: -0.000455481633339072&quot; ## [1] &quot;dEdt at time t = 0.900170524801159 is: -0.00102570402370873&quot; ## [1] &quot;dIdt at time t = 0.900170524801159 is: 0.00131665472975933&quot; ## [1] &quot;S at time t = 0.900170524801159 is: 0.988702553727926&quot; ## [1] &quot;E at time t = 0.900170524801159 is: 0.00888518412147013&quot; ## [1] &quot;I at time t = 0.900170524801159 is: 0.00230483294164379&quot; ## [1] &quot;R at time t = 0.900170524801159 is: 0.977512536664812&quot; ## [1] &quot;dSdt at time t = 0.900170524801159 is: -0.000455758843063893&quot; ## [1] &quot;dEdt at time t = 0.900170524801159 is: -0.00102510517718113&quot; ## [1] &quot;dIdt at time t = 0.900170524801159 is: 0.00131623309584189&quot; ## [1] &quot;S at time t = 1.51605042118312 is: 0.988373201062988&quot; ## [1] &quot;E at time t = 1.51605042118312 is: 0.00833402334892546&quot; ## [1] &quot;I at time t = 1.51605042118312 is: 0.00306636105684125&quot; ## [1] &quot;R at time t = 1.51605042118312 is: 0.976972816657221&quot; ## [1] &quot;dSdt at time t = 1.51605042118312 is: -0.000606141818673015&quot; ## [1] &quot;dEdt at time t = 1.51605042118312 is: -0.000782862072814562&quot; ## [1] &quot;dIdt at time t = 1.51605042118312 is: 0.0011699781017132&quot; ## [1] &quot;S at time t = 1.51605042118312 is: 0.988374175939042&quot; ## [1] &quot;E at time t = 1.51605042118312 is: 0.00833166910389482&quot; ## [1] &quot;I at time t = 1.51605042118312 is: 0.0030680885146263&quot; ## [1] &quot;R at time t = 1.51605042118312 is: 0.97697441832052&quot; ## [1] &quot;dSdt at time t = 1.51605042118312 is: -0.000606483891470362&quot; ## [1] &quot;dEdt at time t = 1.51605042118312 is: -0.000782127625845441&quot; ## [1] &quot;dIdt at time t = 1.51605042118312 is: 0.00116946233769964&quot; We can see from this output how lsoda is stepping through to numerically solve the differential equations. 3.4 Explore Results Results from lsoda(). head(sol) ## time 1 2 3 ## [1,] 0 0.9890000 0.010000000 0.001000000 ## [2,] 1 0.9886557 0.008785122 0.002434822 ## [3,] 2 0.9880543 0.007993881 0.003610166 ## [4,] 3 0.9872404 0.007518909 0.004604707 ## [5,] 4 0.9862442 0.007284371 0.005474887 ## [6,] 5 0.9850863 0.007234498 0.006263121 3.4.1 “Tidy” the output This is confusing. Let’s clean it up. SEIR_Population &lt;- sol %&gt;% as.data.frame() %&gt;% janitor::clean_names() %&gt;% rename(S = x1, E = x2, I = x3) %&gt;% as_tibble() %&gt;% mutate(R = 1 - rowSums(.[2:4])) %&gt;% mutate(across(.cols = S:R, .fns = ~ . * 10000)) SEIR_Population ## # A tibble: 366 x 5 ## time S E I R ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 0 9890 100 10 0 ## 2 1 9887. 87.9 24.3 1.24 ## 3 2 9881. 79.9 36.1 3.42 ## 4 3 9872. 75.2 46.0 6.36 ## 5 4 9862. 72.8 54.7 9.97 ## 6 5 9851. 72.3 62.6 14.2 ## 7 6 9838. 73.3 70.0 18.9 ## 8 7 9823. 75.4 77.1 24.2 ## 9 8 9807. 78.4 84.2 29.9 ## 10 9 9790. 82.2 91.3 36.2 ## # ... with 356 more rows 3.4.2 Visualize Output SEIR_Population %&gt;% pivot_longer(cols = S:R, names_to = &quot;Bin&quot;, values_to = &quot;Population&quot;) %&gt;% ggplot(aes(x = time, y = Population, color = fct_relevel(Bin, &quot;S&quot;, &quot;E&quot;, &quot;I&quot;, &quot;R&quot;))) + geom_line() + labs(x= &quot;Time&quot;, y = &quot;Population&quot;, color = &quot;Bin&quot;) "],
["4-collaboration-using-git.html", "4 Collaboration Using Git 4.1 Collaboration 4.2 Common commands 4.3 Example", " 4 Collaboration Using Git 4.1 Collaboration As much as time allows, we will demonstrate the following: Pushing edits of code to the remote repository Pulling code from the remote repository Managing and merging conflicts Branching 4.2 Common commands git status Requests the status tracked changes with in the repo git add . Stages tracked files to be comitted The ‘.’ tracks all chagned files. Can also specify files to be tracked by naming them specifically or using regular expressions. git commit -m \"informative message\" Commits the files to be tracked. git push Pushes committed files to the remote repository. git pull Pulls down and starts merge process of remote files if necessary. 4.3 Example From here on out, we will work from the following R Markdown file. example_code/example_markdown.rmd "]
]

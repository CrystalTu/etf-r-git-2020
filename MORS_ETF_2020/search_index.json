[
["index.html", "Intermediate R 1 Class Introduction 1.1 Expectations 1.2 Prerequisites 1.3 Distance Learning Challenges 1.4 Class Structure 1.5 Learning Recommendations 1.6 Endstate 1.7 Instructors Introduction 1.8 Lets Get Started…", " Intermediate R MAJ Dusty Turner and Robert Ward 15 JUN 2020 1 Class Introduction Topics R Project Set Up git and hosting a git repository Introductory git commands Sharing a project via git Bonus Differential Equations in R 1.1 Expectations By attending this tutorial, we assume you have… working knowledge of R and RStudio conteporary tidy coding concepts a need to work collaborativly on a project a healthy appreciation of Dad Jokes Give it a shot, if its too much or too little, will not be offended if you leave. Its okay to struggle. 1.2 Prerequisites R 3.6.x or newer RStudio 1.2.x or newer Git Git Bash (included with Git for Windows) or another command-line application of your choice capable of using Git 1.3 Distance Learning Challenges Don’t be afraid to ask questions - both verbally and in chat If you miss something we said, its likely others have too Its difficult the know the speed of the class so please communicate! 1.4 Class Structure 2 hours of instruction 1 ten minute break We will ask for feedback to get a feel for understanding 1.5 Learning Recommendations Use RMD files provided in repo (will get this this later) Take notes with comments Execute code along with us Ask questions in chat 1.6 Endstate You have git configured on your computer You have linked git to github or gitlab You have a repo cloned to your computer. You can push, pull, and merge git conflicts, on the repository. You’ve learned a little more about differential equations in R. 1.7 Instructors Introduction 1.7.1 MAJ Dusty Turner Army Combat Engineer Platoon Leader / XO / Company Commander Geospatial / Sapper / Route Clearance Hawaii / White Sands Missile Range / Iraq / Afghanistan Education West Point ’07 Operations Research, BS Missouri University of Science and Technology ’12 Engineering Management, MS THE Ohio State ’16 Integrated Systems Engineering, MS Applied Statistics, Graduate Minor Data Science R User Since ’14 Catch me on Twitter @dtdusty http://dusty-turner.netlify.com/ 1.7.2 Robert Ward Education University of Chicago, ’13 Political Science &amp; English, BA Columbia University School of International and Public Affairs, ’18 Master of International Affairs, Specialization in Advanced Policy and Economic Analysis Data Science R user since 2011; also know some python and forgot some Stata Worked for GAO Applied Research &amp; Methods ORSA at CAA and Army Leader Dashboard/Vantage PM team 1.8 Lets Get Started… 1.8.1 Prerequisite Packages install.packages( &quot;tidyverse&quot; dependencies = TRUE ) "],
["2-initialize-r-project.html", "2 Initialize R Project 2.1 Create R Project 2.2 Create an R Markdown 2.3 Show a differential equation and output data 2.4 Show visualization 2.5 Update gitignore", " 2 Initialize R Project 2.1 Create R Project 2.2 Create an R Markdown 2.3 Show a differential equation and output data 2.4 Show visualization 2.5 Update gitignore "],
["3-introduction-to-git.html", "3 Introduction to git 3.1 Prerequisites 3.2 Terminology: Git vs. Git Bash vs. GitHub/GitLab/BitBucket 3.3 Generate an SSH Key 3.4 put ssh key in github/gitlab 3.5 set global configurations in git 3.6 clone repo", " 3 Introduction to git Git is the world’s most widely used version control system. It is fast, flexible, and relatively easy to learn given its sophistication under the hood, making it an invaluable tool for collaborative software development. Moreover, access to Git and to services for using it collaboratively, such as GitLab, has grown substantially in the Department of Defense in recent years, including on classified networks. Learning to use Git and related services will make you a more capable programmer, even if you primarily work alone or don’t think of yourself as doing “software development.” 3.1 Prerequisites Git installed on your computer GitHub account 3.2 Terminology: Git vs. Git Bash vs. GitHub/GitLab/BitBucket “Git” is a piece of software whose primary job is to track changes between different versions of text (and other) files, efficiently keep track of the entire history of those changes, and provide tools to merge different versions of files and “branches” of repositories (called “repos” for short). Git is a distributed version control system, meaning that the entire repo and its entire history are held simultaneously in every location where the repo is stored. You must install and run Git on your own computer to use it. “Git Bash” is a command-line application included with Git for Windows, which makes the bash shell - the default command-line shell for many Linux systems - available in Windows. “GitHub,” “GitLab,” “BitBucket,” and their competitors are websites that have built additional functionality around Git, primarily focused on helping people share Git repos. They provide a central location to and from which collaborators can sync any changes they’ve made to their shared repository. They also often include various project-management and Continuous Integration/Continuous Deployment (CI/CD) tools; these are not integral to Git, and we won’t be covering them today, but they can be very useful. Somewhat confusingly, GitHub also makes a piece of software called GitHub Desktop, which bundles Git itself with a graphical interface designed for use with GitHub specifically. We won’t be using this, and I prefer using Git on the command line, but it is one of many graphical Git clients that you might consider using. Today, we’ll be using a command-line tool (Git Bash on Windows, the built-in terminal if you’re on Mac or Linux), to run various git commands on our own computers, some of which will involve communicating with GitHub. 3.3 Generate an SSH Key In most cases, your computer will communicate with GitHub using the secure SSH protocol. Instead of the usual username/password or smart card authentication, SSH typically involves public/private key authentication. In this setup, you generate a pair of keys, provide your public key to sites that you’d like to securely communicate with, and then let ssh do some cryptographic magic to use your private key to prove your identity without ever exposing it to anyone else. To generate a key pair, running the following line of code in Git Bash/Terminal. Use the same email address as your GitHub account. ssh-keygen -t ed25519 -C &quot;&lt;your_email_here@host.com&gt;&quot; You should see a response like the one below. If you don’t already have a key, just hit enter to use the suggested file path. Generating public/private ed25519 key pair. Enter file in which to save the key (/c/Users/robert.w.ward/.ssh/id_ed25519): You can then set a passphrase for your ssh key. This has no connection to your GitHub password or anything else - it’s an additional layer of security on the keypair itself, meant to ensure that nobody could impersonate you to GitHub even if they had your private key. You won’t see letters appear as you type, but you will have to type the same password twice. Good luck! Enter passphrase (empty for no passphrase): Enter same passphrase again: 3.4 put ssh key in github/gitlab You now need to copy the public key from the newly-generated pair so that you can upload it to GitHub. You have a couple of options here. To stick with the command line, you can use the cat command, plus the path to your key, to print it out in the terminal, and then copy it from there. cat ~/.ssh/id_ed25519.pub Typically, copying from bash uses the rather unusual hotkey Ctrl+Ins, or you can right-click the highlighted text and click “Copy.” Now, navigate to (GitLab’s SSH Key settings page)[https://github.com/settings/keys] 3.5 set global configurations in git 3.6 clone repo "],
["4-make-edits-in-the-r-project.html", "4 Make Edits in the R Project 4.1 We Make an edit in R Markdown and Push 4.2 Have Everyone Pull 4.3 Induce a Merge Conflict 4.4 Fix Merge Conflict 4.5 Make a branch 4.6 End of lesson", " 4 Make Edits in the R Project 4.1 We Make an edit in R Markdown and Push 4.2 Have Everyone Pull 4.3 Induce a Merge Conflict 4.4 Fix Merge Conflict 4.5 Make a branch 4.6 End of lesson "]
]
